#
# Makefile template for linux architecture
#

ifeq (X$(shell uname -m),Xi386)
EXTRADEFINES += -DLITTLE_ENDIAN
endif

CC      = gcc
ifneq ($(shell which gfortran 2>&1 | grep -vc 'no gfortran'),0)
FC      = gfortran
else
FC      = g77
endif
RANLIB  = ranlib
DllSuf  = so
INSTALLFLAGS = -c
ArchiveSuf = a
FF      = $(FC)
ObjSuf  = o

ifdef $(ENABLESHARED)
   DOSHRLIB = 1
ifneq ($(shell which gfortran 2>&1 | grep -vc 'no gfortran'),0)
   REQUIREDLIBS = -lgfortran -lgfortranbegin -lm -lc
else
   REQUIREDLIBS = -lg2c -lm -lc
endif
else
   DOSHRLIB =
endif

SHRLIBFLAGS = -fPIC
CDEBUGFLAGS = -O -m32
FDEBUGFLAGS =  -O -m32
INCPATH     = -I.
ifneq ($(shell which gfortran 2>&1 | grep -vc 'no gfortran'),0)
CFLAGS = $(CDEBUGFLAGS) \
        -fno-strength-reduce -fomit-frame-pointer $(SHRLIBFLAGS) \
        -DUNIX -DKEK -DJLC -DMACHTEN_PPC -D__DARWIN__ \
        -Dlinux -DPPC -D__powerpc__ -D__GFORTRAN__ \
        -DX_LOCALE $(JAVAVMFLAG) $(EXTRADEFINES) $(INCPATH)   
FFLAGS = $(FDEBUGFLAGS) \
        -fdollar-ok -fno-backslash -fno-automatic \
	-fno-second-underscore -fno-range-check \
        $(SHRLIBFLAGS) $(JAVAVMFLAG) \
	-DUNIX -DKEK -DJLC -DMACHTEN_PPC -D__DARWIN__ -DG77_521_OR_GREATER \
        -D__GFORTRAN__ \
        $(PYTHIA_FLAGS) $(EXTRADEFINES) $(INCPATH)
else
CFLAGS = $(CDEBUGFLAGS) \
        -fno-strength-reduce -fomit-frame-pointer $(SHRLIBFLAGS) \
        -DUNIX -DKEK -DJLC -DMACHTEN_PPC -D__DARWIN__ \
        -Dlinux -DPPC -D__powerpc__ \
        -DX_LOCALE $(JAVAVMFLAG) $(EXTRADEFINES) $(INCPATH)
FFLAGS = $(FDEBUGFLAGS) \
        -fdollar-ok -fno-backslash -fno-automatic \
        -fno-second-underscore \
        $(SHRLIBFLAGS) $(JAVAVMFLAG) \
        -DUNIX -DKEK -DJLC -DMACHTEN_PPC -D__DARWIN__ -DG77_521_OR_GREATER \
        $(PYTHIA_FLAGS) $(EXTRADEFINES) $(INCPATH)
endif

FSRCS         = $(strip $(subst .o,.F,$(FOBJS)))
ifeq ($($(strip $(subst -m32,,$(FC)))),gfortran)
GCCMAJVER = $(shell gcc -dumpversion 2>/dev/null | sed -e 's;\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\);\1;')
GCCMINVER = $(shell gcc -dumpversion 2>/dev/null | sed -e 's;\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\);\2;')
ifeq ($(GCCMAJVER),4)
ifneq ($(GCCMINVER),0)
ifneq ($(GCCMINVER),1)
FFLAGS += -fno-range-check
endif
endif
endif
endif

