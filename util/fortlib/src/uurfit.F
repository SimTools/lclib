C     SUBROUTINE UURFIT
C  
C     PURPOSE
C       MAKE A MINIMUM SEARCH OF A NON-LINEAR FUNCTION
C          WITH A LINEARIZATION OF THE FITTING FUNCTION
C     DESCRIPTION OF PARAMETERS
C       FUNC   - NAME OF THE FUNCTION TO BE MINIMIZED
C       NTERMS - NUMBER OF PARAMETERS
C       PARAM  - ARRAY OF PARAMETERS
C       DELTAA - ARRAY OF INCRIMENTS FOR PARAMETERS A
C       SIGMAA - ARRAY OF STANDARD DEVIATIONS FOR PARAMETERS A
C       FLAMDA - PROPORTION OF GRADIENT SEARCH INCLUDED
C       CHISQR - REDUCED CHI SQUARE FOR FIT
C     SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C       FUNC (NTERMS,PARAM)
C       MATINV (ARRAY, NTERMS, DET)
C     COMMENTS
C       SET FLAMDA = 0.001 AT BEGGINING OF SEARCH
C  
      SUBROUTINE UURFIT (FUNC, NTERMS, PARAM, DELTAA, FLAMDA,
     %                    SIGMAA, CHISQR)
C  
      PARAMETER ( MXTM = 10 )
      DOUBLE PRECISION ARRAY
      DIMENSION ALPHA(MXTM,MXTM), BETA(MXTM), ARRAY(MXTM,MXTM), B(MXTM)
     % , SQALP(MXTM,MXTM)
      DIMENSION PARAM(1),DELTAA(1),SIGMAA(1)
      EXTERNAL FUNC
      DATA BIG / 1.E20 /
C  
      IF (NTERMS) 13, 13, 20
   13 CHISQR = 0.
      GO TO 110
   
C        EVALUATE ALPHA AND BETA MATRICES
   
   20 CONTINUE
      FUN1  = FUNC(NTERMS,PARAM)
      DO 50 J = 1, NTERMS
        PARAM(J) = PARAM(J) + DELTAA(J)
        FUN2  = FUNC(NTERMS,PARAM)
        PARAM(J) = PARAM(J) - 2.*DELTAA(J)
        FUN3  = FUNC(NTERMS,PARAM)
        BETA(J) = (FUN2 - FUN3)/(-4.*DELTAA(J))
        ALPHA(J,J) = (FUN2 - 2.*FUN1 + FUN3)/(2.*DELTAA(J)**2)
        PARAM(J) = PARAM(J) + DELTAA(J)
        DO 40 K = 1,J-1
          PARAM(K) = PARAM(K) + DELTAA(K)
          FUN4  = FUNC(NTERMS,PARAM)
          PARAM(J) = PARAM(J) + DELTAA(J)
          FUN5  = FUNC(NTERMS,PARAM)
          ALPHA(J,K) = (FUN5 - FUN2 - FUN4 + FUN1)/(2.*DELTAA(J)*
     %                 DELTAA(K))
          PARAM(K) = PARAM(K) - DELTAA(K)
          PARAM(J) = PARAM(J) - DELTAA(J)
   40   CONTINUE
   50 CONTINUE
   51 DO 53 J = 1, NTERMS
      DO 53 K = 1, J-1
   53 ALPHA(K,J) = ALPHA(J,K)
   
C        ELIMINATE NEGATIVE CURVATURE
   
   61 DO 70 J = 1, NTERMS
        IF(ALPHA(J,J)) 63, 65, 70
   63   ALPHA(J,J) = -ALPHA(J,J)
        GO TO 66
   65   ALPHA(J,J) = 0.01
   66   DO 69 K = 1, NTERMS
          IF (K - J) 68, 69, 68
   68     ALPHA(J,K) = 0.
          ALPHA(K,J) = 0.
   69   CONTINUE
   70 CONTINUE
   
C        EVALUATE CHI SQUARE AT STARTING POINT
   
      CHISQ1 = FUN1
   
C        INVERT MODIFIDD CURVATURE MATRIX TO FIND NEW PARAMETERS
   
   71 DO 74 J = 1, NTERMS
      DO 73 K = 1, J
      SQALP(J,K) = SQRT(ALPHA(J,J)*ALPHA(K,K))
      ARRAY(J,K) = ALPHA(J,K) / SQALP(J,K)
      SQALP(K,J) = SQALP(J,K)
      ARRAY(K,J) = ARRAY(J,K)
   73 CONTINUE
   74 ARRAY(J,J) = 1. + FLAMDA
   80 CALL MATINV (ARRAY, NTERMS, DET)
   81 DO 84 J = 1, NTERMS
      B(J)   = PARAM(J)
      DO 84 K = 1, NTERMS
      PARAM(J)   = BETA(K)*ARRAY(J,K) / SQALP(J,K) + PARAM(J)
   84 CONTINUE
C        IF CHI SQUARE INCREASED, INCREASE FLAMDA AND TRY AGAIN
   93 CHISQR = FUNC (NTERMS,PARAM)
      IF (CHISQ1 - CHISQR) 95, 101, 101
   95 FLAMDA = 10.*FLAMDA
      IF(ABS(FLAMDA).GT.BIG) GO TO 101
      DO 96 J = 1,NTERMS
        PARAM(J)   = B(J)
   96 CONTINUE
      GO TO 71
   
C        EVALUATE PARAMETERS AND UNCERTAINTIES
   
  101 DO 103 J = 1, NTERMS
        ARRALP = ARRAY(J,J) / ALPHA(J,J)
        IF(ARRALP.LT.0.) THEN
          SIGMAA(J) = -SQRT (-ARRALP)
        ELSE
          SIGMAA(J) = SQRT (ARRALP)
        ENDIF
  103 CONTINUE
      FLAMDA = FLAMDA/10.
  110 RETURN
      END
