C   06/11/87 805171234  MEMBER NAME  JCLUST   (FORT)        FORTRAN
C----------
C JCLUST
C----------
C
C JADE_CLUSTER
C     CLUSTER FINDING PROGRAM USED BY JADE COLLABORATION
C     IN "EXPERIMETAL STUDIES ON MULTIJET PRDCTION IN
C     E+E- ANNIHILATION AT PETRA ENERGIES"
C
C MODIFIED BY A.SHIRAHASHI, UNIV. OF TOKYO, 26-NOV-87
C   * SUBROUTINE NAME HAS BEEN CHANGED FROM 'JADECL' TO 'JCLUST'.
C   * PARTICLE LIST IS TRANSFERED IN 'YAMAMOTO LIBRARY' FORMAT.
C   * REMOVE DUMMY ARGUMENT 'MAXJET'.
C   * REMOVE AN ARGUMENT 'YIJ'.
C   * RETURN 'JETTBL' FOR YCUT(MAXCUT).  ( JETTBL(I) IS THE INDEX OF
C     THE JET TO WHICH I'TH PARTICLE IS ASSIGNED.  THE SIZE OF ARRAY
C     JETTBL SHOULD BE GREATER THAN 2*NUMPRT. )
C   * NUMJET(I) CONTAINS # PARTICLES IN I'TH JET FOR YCUT(MAXCUT).
C   * EXPAND FUNCTION 'ANAPRO' IN LINE.
C
C MODIFIED BY A.SHIRAHASHI, UNIV. OF TOKYO, 4-DEC-87
C   * TAKE INTO ACCOUNT THE MASSES OF PARTICLES AND CLUSTERS.
C   * THE ENERGY OF THE CLUSTER IS CALCULATED AS THE SUM OF TWO SUB-
C     CLUSTERS.
C   * THE ENERGY OF EACH PARTICLE SHOULD BE GIVEN IN PRTLST(IPX0+4,I)
C     BY THE USER.
C   * THIS VERSION IS COMPATIBLE WITH THE ALGORITHM USED BY JADE.
C   * USE LOCAL WORK AREA 'JETWOW' AND 'JETIDX' AND THE SIZE OF ARRAY
C     'JETTBL' MAY BE REDUCED TO NUMPRT.
C
C MODIFIED BY A.SHIRAHASHI, UNIV. OF TOKYO, 9-DEC-87
C   * STORE PAIR MASSES INTO ARRAY INVMAS AND REUSE THEM.
C
C   INPUT:
C     INTEGER * 4  NUMPRT
C     REAL    * 4  PRTLST( LNGDAT,NUMPRT )
C     INTEGER * 4  LNGDAT
C     INTEGER * 4  IPX0
C     INTEGER * 4  MAXCUT
C     REAL    * 4  YCUT( MAXCUT )
C
C     PRTLST : FOUR VECTORS OF PARTICLES.
C              PRTLST(IPX0+J,I) = PX, PY, PZ AND E OF I'TH PATICLES
C              FOR J = 1, 4.
C
C   OUTPUT:
C     INTEGER * 4  NUMCLS( MAXCUT )
C     INTEGER * 4  NUMJET( * )
C     INTEGER * 4  JETTBL( NUMPRT )
C     REAL    * 4  JETLST( 4,NUMPRT )
C     INTEGER * 4  STATUS
C
C
      SUBROUTINE JCLUST( NUMPRT, PRTLST, LNGDAT, IPX0,
     &                   MAXCUT, YCUT, NUMCLS,
     &                   NUMJET, JETTBL, JETLST, STATUS )
C
C
C INPUT:
      INTEGER * 4  NUMPRT, LNGDAT, IPX0
      REAL    * 4  PRTLST( LNGDAT,* )
C
      INTEGER * 4  MAXCUT
      REAL    * 4  YCUT(MAXCUT)
C
C OUTPUT:
      INTEGER * 4  NUMCLS(MAXCUT)
      INTEGER * 4  NUMJET( * )
      INTEGER * 4  JETTBL( * )
      REAL    * 4  JETLST( 4,* )
      INTEGER * 4  STATUS
C
C CONSTANT:
      INTEGER ERR,OK
      PARAMETER (ERR=-1, OK=0)
      INTEGER MAXPRT
C      PARAMETER (MAXPRT = 200)
      PARAMETER (MAXPRT = 2000)
      PARAMETER (MAXTBL = MAXPRT*(MAXPRT-1)/2)
C
C LOCAL:
      INTEGER I,J
      REAL    ENERGY,ENGYI, ENGYJ
      REAL    COSANG
      REAL    MASIJ2
      REAL    MASMIN
      INTEGER MINI,MINJ
      REAL    EVIS
      INTEGER CUTID
C
      REAL    * 4  JETWOW( MAXPRT )
      INTEGER * 4  JETIDX( MAXPRT )
      REAL    * 4  YIJ
      INTEGER * 4  NJET, NPNTR, K
      INTEGER * 4  IROW( MAXPRT )
      REAL    * 4  INVMAS( MAXTBL )
C
C COPY 4 VECTORS INTO JETLST AND SOME SETUPS
C
      IF( NUMPRT .GT. MAXPRT ) THEN
        PRINT *, 'JCLUST - TOO MANY PARTICLES.'
        STATUS = ERR
        RETURN
      END IF
C
      DO 10 I=1,MAXCUT
        NUMCLS(I)=0
10    CONTINUE
      NJET=NUMPRT
      EVIS = 0.0
      DO 20 I=1,NUMPRT
        DO 21 J=1,4
          JETLST(J,I) = PRTLST(IPX0+J,I)
21      CONTINUE
        JETWOW(I) = 1.0 / SQRT
     &    ( JETLST(1,I)**2 + JETLST(2,I)**2 + JETLST(3,I)**2 )
        EVIS = EVIS + JETLST(4,I)
        JETTBL(I) = 0
        JETIDX(I) = I
        IROW(I) = (NUMPRT-1)*(I-1)-(I-1)*(I-2)/2-I
20    CONTINUE
C
C CALCULATE INVARIANT PAIR MASSES, TAKE INTO ACCOUNT THE PARTICLE AND
C CLUSTER MASSES.
C
      DO 10000 I = 1, NUMPRT
        PX = JETLST(1,I)
        PY = JETLST(2,I)
        PZ = JETLST(3,I)
        E = JETLST(4,I)
        W = JETWOW(I)
        DO 10010 J = I+1, NUMPRT
          D = PX*JETLST(1,J)+PY*JETLST(2,J)+PZ*JETLST(3,J)
          INVMAS(IROW(I)+J) = 2.0*E*JETLST(4,J)*(1.0-D*W*JETWOW(J))
10010   CONTINUE
10000 CONTINUE
C
C SEARCH THE PAIR OF MINIMUM INVARIANT MASS
C
      CUTID=1
1     CONTINUE
      MASMIN = 99999.9
      DO 30 I=1,NJET
        II = JETIDX(I)
        DO 31 J=I+1,NJET
          JJ = JETIDX(J)
          MASIJ2 = INVMAS(IROW(II)+JJ)
          IF( MASIJ2.LT.MASMIN ) THEN
            MASMIN = MASIJ2
            MINI = I
            MINJ = J
          END IF
31      CONTINUE
30    CONTINUE
C
      MINII = JETIDX(MINI)
      MINJJ = JETIDX(MINJ)
C
      YIJ = MASMIN/(EVIS**2)
      IF( MASMIN.GT.99999. ) THEN
        PRINT *, 'JCLUST - ERROR. MASMIN>99999.0'
        STATUS=ERR
        RETURN
      ELSE
60      IF( YIJ.GT.YCUT(CUTID) ) THEN
          NUMCLS(CUTID) = NJET
          CUTID = CUTID+1
          IF( CUTID.GT.MAXCUT ) THEN
            STATUS = OK
            GOTO 100
          END IF
          GOTO 60
        END IF
      END IF
C
C JOIN I'TH CLUSTER AND J'TH CLUSTER
C
      DO 40 J=1,4
        JETLST(J,MINII)=JETLST(J,MINII)+JETLST(J,MINJJ)
40    CONTINUE
      JETWOW(MINII) = 1.0 / SQRT
     &  ( JETLST(1,MINII)**2+JETLST(2,MINII)**2+JETLST(3,MINII)**2 )
      JETTBL(MINJJ)=-MINII
      DO 50 I=MINJ+1,NJET
        JETIDX(I-1)=JETIDX(I)
50    CONTINUE
      NJET=NJET-1
C
C CALCULATE INVARIANT MASSES FOR THE PARIS INCLUDING THE MERGED CLUSTER
C
      PX = JETLST(1,MINII)
      PY = JETLST(2,MINII)
      PZ = JETLST(3,MINII)
      E = JETLST(4,MINII)
      W = JETWOW(MINII)
      DO 10100 J = 1, NJET
        JJ = JETIDX(J)
        D = PX*JETLST(1,JJ)+PY*JETLST(2,JJ)+PZ*JETLST(3,JJ)
        Q = 2.0*E*JETLST(4,JJ)*(1.0-D*W*JETWOW(JJ))
        IF( J .LT. MINI ) THEN
          INVMAS( IROW(JJ)+MINII ) = Q
        ELSE IF( J .GT. MINI ) THEN
          INVMAS( IROW(MINII)+JJ ) = Q
        END IF
10100 CONTINUE
C
      IF( NJET.EQ.1 ) THEN
        NUMCLS(CUTID) = NJET
        CUTID = CUTID+1
        IF (CUTID.GT.MAXCUT) THEN
          STATUS=OK
          GOTO 100
        ENDIF
      ELSE
        GOTO 1
      ENDIF
C
C COPY JET MOMENTUM AND ENERGY ON THE TOP OF 'JETLST'.
C
100   CONTINUE
      DO 110 I=1,NJET
        II=JETIDX(I)
        IF( II.GT.I ) THEN
          DO 120 J=1,4
            JETLST(J,I)=JETLST(J,II)
120       CONTINUE
        ELSE IF( II.LT.I ) THEN
          PRINT *, 'JCLUST - FATAL ERROR. II<I'
          STATUS=ERR
          RETURN
        END IF
110   CONTINUE
C
C TRACE BACK POINTERS AND ASSIGN EACH PARTICLE TO ONE OF JETS.
C
      DO 130 I=1,NJET
        NPNTR=0
        J=JETIDX(I)
        NUMJET(I)=0
140     CONTINUE
        JETTBL(J)=I
        NUMJET(I)=NUMJET(I)+1
        DO 150 K=1,NUMPRT
          IF( JETTBL(K).EQ.-J ) THEN
            NPNTR=NPNTR+1
            IF( NPNTR.GT.NUMPRT-NJET ) THEN
              PRINT *, 'JCLUST - STACK OVERFLOW.'
              STATUS=ERR
              RETURN
            END IF
            JETIDX(NJET+NPNTR)=K
          END IF
150     CONTINUE
        IF( NPNTR.GT.0 ) THEN
          J=JETIDX(NJET+NPNTR)
          NPNTR=NPNTR-1
          GOTO 140
        END IF
130   CONTINUE
C
      RETURN
      END
